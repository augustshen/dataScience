stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)
stick <- my_pick
stick == prize_door
})
mean(stick)
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)
stick <- my_pick
stick == prize_door
})
mean(stick)
stick == prize_door
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)
stick <- my_pick
stick == prize_door
})
mean(stick)
switch <- doors[!doors %in% c(my_pick, show)]
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)
stick <- my_pick
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car", "goat", "goat"))
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)
stick <- my_pick
switch <- doors[!doors %in% c(my_pick, show)]
switch == prize_door
})
mean(switch)
?list
#1.3 exercises
#1.3 ex1
n <- 6
l <- list(c(0, 1), 6)
l <- list(0,1)
l <- list(sample(c(0,1), n, replace = TRUE))
#1.3 exercises
#1.3 ex1
# Assign a variable 'n' as the number of remaining games.
n <- c(1:6)
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- list(0,1)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- epxand.grid(number = n, result=l)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(number = n, result=l)
possibilities
?expand.grid
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
x <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
d1 <- expand.grid(x = x, y = y)
d2 <- expand.grid(x = x, y = y, KEEP.OUT.ATTRS = FALSE)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(l,n)
#1.3 exercises
#1.3 ex1
# Assign a variable 'n' as the number of remaining games.
n <- 6
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- list(0,1)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(l,n)
possibilities
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(l,l,l,l,l,l)
possibilities
?rep
rep(1:4, 2)
rep(1:4, each = 2)       # not the same.
rep(1:4, c(2,2,2,2))     # same as second.
possibilities <- expand.grid(rep(l, 6))
possibilities
possibilities <- expand.grid(l,rep(6))
possibilities
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(l,l,l,l,l,l)
possibilities
?rowSums
rowSums(possibilities)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x);
possibilities
rowSums(possibilities)
names(possibilities)
objects(possibilities)
types(possibilities)
type(possibilities)
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
deck <- expand.grid(number=numbers, suit = suits)
deck
deck <- paste(deck$number, deck$suit)
deck
possibilities <- cbind(l,l,l,l,l,l)
possibilities
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- c(0,1)
#1.3 exercises
#1.3 ex1
# Assign a variable 'n' as the number of remaining games.
n <- 6
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- c(0,1)
possibilities <- cbind(l,l,l,l,l,l)
possibilities
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- c(0:1)
possibilities <- cbind(l,l,l,l,l,l)
possibilities
combn(l, n)
combn(l, 2)
combn(l, 2, replace=TRUE)
combn(l, n, replace=TRUE)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(l,l,l,l,l,l)
possibilities
data.frame(possibilities)
df <- data.frame(possibilities)
rowSums(df);
results <- rowSums(df);
mean(results >= 4)
seq(1, 25, 2)
#2.1.1 Continuous Probability
# cumulative distribution function CDF
# empirical cumulative distribution function eCDF
library(tidyverse)
library(dslabs)
data("heights")
x <- heights %>% filter(sex=="Male") %>% .$height
F <- function(a) mean(x<=a)
1 - F(70)
#2.1.2 Theoretical Distribution
1 - pnorm(70.5, mean(x), sd(x))
plot(prop.table(table(x)), xlab="a = Height in inches", ylab="Pr(X - a)")
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)
pnorm(68.5, mean(x), sd(x)) - pnorm(67.5, mean(x), sd(x))
pnorm(69.5, mean(x), sd(x)) - pnorm(68.5, mean(x), sd(x))
pnorm(70.5, mean(x), sd(x)) - pnorm(69.5, mean(x), sd(x))
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, mean(x), sd(x)) - pnorm(70.1, mean(x), sd(x))
#2.1.3  Probability Density
#F(a) = Pr(X <= a)  F(a) is probability Density
avg <- mean(x)
s <- sd(x)
1 - pnorm(76, avg, s)
dnorm(76, avg, s)
#2.1.4 Monte Carlo Simulations
x <- heights %>% filter(sex=="Male") %>% .$height
n <- length(x)
avg <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, avg, s)
ds_theme_set()
data.frame(simulated_heights=simulated_heights) %>% ggplot(aes(simulated_heights)) +
geom_histogram((color="black", binwidth=2))
data.frame(simulated_heights=simulated_heights) %>% ggplot(aes(simulated_heights)) +
geom_histogram((color="black", binwidth=2))
ds_theme_set()
data.frame(simulated_heights=simulated_heights) %>% ggplot(aes(simulated_heights)) +
geom_histogram((color="black", binwidth=2))
data.frame(simulated_heights=simulated_heights) %>% ggplot(aes(simulated_heights)) +
geom_histogram(color="black", binwidth=2)
B <- 10000
tallest <- replicate(B, {
simulated_data <- rnorm(800, avg, s)
max(simulated_data)
})
mean(tallest > 70)
mean(tallest > 76)
mean(tallest > 90)
mean(tallest >= 84)
# student-t
# chi-squared
# exponential
# gamma
# beta
# d - density
# q - quantile
# p - probability density
# r - random
# norm - normal distribution
x <- seq(-4, 4, length.out = 100)
data.frame(x, f=dnorm(x)) %>% ggplot(aes(x,f)) + geom_line()
# 2.1 ex8
# The variable `B` specifies the number of times we want the simulation to run.
B <- 1000
# Use the `set.seed` function to make sure your answer matches the expected result after random number generation.
set.seed(1)
# Create an object called `highestIQ` that contains the highest IQ score from each random distribution of 10,000 people.
highestIQ <- max(rnorm(10000, 100, 15))
his <- replicate(B, highestIQ)
# Make a histogram of the highest IQ scores.
hist(his)
# 3.1 Random Variables & Sampling Models
beads <- rep(c("red", "blue"), times = c(2, 3))
X <- ifelse(sample(beads, 1) == "blue", 1, 0)
X
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
ifelse(sample(beads, 1) == "blue", 1, 0)
# 3.1.2 Sampling Models
color <- rep(c("Black", "Red", "Green"), c(18, 18, 2))
X <- sample(ifelse(color == "Red", -1, 1), n, replace = TRUE)
X[1:10]
#define in one line code
X <- sample(c(-1, 1), n, replace = TRUE, prob=c(9/19, 10/19))
S <- sum(X)
S
n <- 1000
#define in one line code
X <- sample(c(-1, 1), n, replace = TRUE, prob=c(9/19, 10/19))
S <- sum(X)
S
#define in one line code
X <- sample(c(-1, 1), n, replace = TRUE, prob=c(9/19, 10/19))
S <- sum(X)
S
n <- 1000
B <- 10000
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19))
sum(X)
})
mean(S <= a)
mean(S <= 11)
mean(S <= 0)
mean(S < 0)
mean(S)
sd(S)
s <- seq(min(S), max(S), length=100)
normal_density <- data.frame(s = s, f=dnorm(s, mean(S), sd(S)))
data.frame(S=S) %>% ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") + geom_line(data=normal_density, mapping=aes(s, f), color="blue")
s <- sqrt(sum((x -avg)^2) / length(x))
#3.1.3 distributions versus Probability Distributions
avg <- sum(x) / length(x)
s <- sqrt(sum((x -avg)^2) / length(x))
# 3.1 ex3
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18
# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)
# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green
X <- sample(c(-1, 17), 10000, replace=TRUE, prob=c(p_not_green, p_green))
mean(X)
sd(X)
X <- sample(c(-1, 17), 10000, replace=TRUE, prob=c(p_not_green, p_green))
mean(X)
sd(X)
X <- sample(c(-1, 17), 10000, replace=TRUE, prob=c(p_not_green, p_green))
mean(X)
sd(X)
X <- sample(c(-1, 17), 10000, replace=TRUE, prob=c(p_not_green, p_green))
mean(X)
sd(X)
p_green * 17 - p_not_green
X <- sample(c(-1, 17), 10000, replace=TRUE, prob=c(p_not_green, p_green))
mean(X)
sd(X)
#3.2 central limit theorem
# expected value E[X] = mu
B <- 10^6
X <- sample(c(-1,1), B, replace = TRUE, prob=c(9/19, 10/19))
mean(X)
sqrt(n) * (1 - -1) * sqrt(90)/19
mean(S)
sd(S)
mu <- n * (20 - 18)/38
se <- sqrt(n) * 2 * sqrt(90)/19
pnorm(0, mu, se)
mean(S < 0)
# 4.1.1 the big short: Interest Rates explained
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample(c(0, 1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0, 1), n, prob = c(1-p, p), replace=TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
# 4.1.1 the big short: Interest Rates explained
library(dslabs)
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
# 3.1 Random Variables & Sampling Models
# 3.1.1 Random Variables
beads <- rep(c("red", "blue"), times = c(2, 3))
X <- ifelse(sample(beads, 1) == "blue", 1, 0)
X
ifelse(sample(beads, 1) == "blue", 1, 0)
# 3.1.2 Sampling Models
color <- rep(c("Black", "Red", "Green"), c(18, 18, 2))
n <- 1000
X <- sample(ifelse(color == "Red", -1, 1), n, replace = TRUE)
X[1:10]
#define in one line code
X <- sample(c(-1, 1), n, replace = TRUE, prob=c(9/19, 10/19))
S <- sum(X)
S
n <- 1000
B <- 10000
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19))
sum(X)
})
mean(S < 0)
mean(S)
sd(S)
s <- seq(min(S), max(S), length=100)
normal_density <- data.frame(s = s, f=dnorm(s, mean(S), sd(S)))
data.frame(S=S) %>% ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") + geom_line(data=normal_density, mapping=aes(s, f), color="blue")
library(ggplot2)
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
library(dplyr)
# 4.1.1 the big short: Interest Rates explained
library(dslabs)
library(dplyr)
library(ggplot2)
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample(c(0, 1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0, 1), n, prob = c(1-p, p), replace=TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histagram(binwidth = 0.6, col="black")
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histogram(binwidth = 0.6, col="black")
n * (p * loss_per_foreclosure + (1 - p) * 0)
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p * (1-p))
n * (p * loss_per_foreclosure + (1 - p) * 0)
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p * (1-p))
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
n * (p * loss_per_foreclosure + (1 - p) * 0)
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p * (1-p))
# lp + x(1-p) = 0
x <- -loss_per_foreclosure * p/(1-p)
z <- qnorm(0.01)
# we want P(S < 0) = 0.01
# change to P((S - E[S]) / SE[S] < - E[S]/SE[S])
# (S - E[S]) / SE[S] name to Z
# P(Z < -{lp + x(1-p)}n / ((x-l) * sqrt(n*p*(1-p)))) = 0.01
# qnorm(0.01, avg, sd)  will tell the value of z
# x = -l * (np - z*sqrt(np(1-p))) / (n(1-p) + z*sqrt(np(1-p)))
l <- loss_per_foreclosure
x <- -l * (n*p - z*sqrt(n*p*(1-p))) / (n*(1-p) + z*sqrt(n*p*(1-p)))
x
loss_per_foreclosure * p + x * (1 - p)
B <- 10000
profit <- replicate(B, {
draws <- sample(c(x, loss_per_foreclosure), n, prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit)
mean(profit < 0)
loss_per_foreclosure * p + x * (1-p)
loss_per_foreclosure * r + x * (1-r)
# 4.1.2 the big short
r <- 0.05
x <- r * 180000
loss_per_foreclosure * r + x * (1-r)
loss_per_foreclosure * p + x * (1-p)
# 4.1.2 the big short
r <- 0.05
x <- r * 180000
loss_per_foreclosure * p + x * (1-p)
# E[S] = n * mu
# SE[S] = sqrt(n) * sigema
# z = -E[S]/SE[S] = - sqrt(n) * mu / sigema
z <- qnorm(0.01)
n <- ceiling( (z^2*(x-l)^2*p*(1-p))/(l*p + x*(1-p))^2 )
n
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample(c(0, 1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0, 1), n, prob = c(1-p, p), replace=TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
data.frame(losses_in_millions = losses/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histogram(binwidth = 0.6, col="black")
n * (p * loss_per_foreclosure + (1 - p) * 0)
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p * (1-p))
# lp + x(1-p) = 0
x <- -loss_per_foreclosure * p/(1-p)
# we want P(S < 0) = 0.01
# change to P((S - E[S]) / SE[S] < - E[S]/SE[S])
# (S - E[S]) / SE[S] name to Z
# P(Z < -{lp + x(1-p)}n / ((x-l) * sqrt(n*p*(1-p)))) = 0.01
# qnorm(0.01, avg, sd)  will tell the value of z
# x = -l * (np - z*sqrt(np(1-p))) / (n(1-p) + z*sqrt(np(1-p)))
l <- loss_per_foreclosure
z <- qnorm(0.01)
x <- -l * (n*p - z*sqrt(n*p*(1-p))) / (n*(1-p) + z*sqrt(n*p*(1-p)))
x
loss_per_foreclosure * p + x * (1 - p)
B <- 10000
profit <- replicate(B, {
draws <- sample(c(x, loss_per_foreclosure), n, prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit)
mean(profit < 0)
x / 180000
# 4.1.2 the big short
r <- 0.05
x <- r * 180000
loss_per_foreclosure * p + x * (1-p)  # these three lines seems not right
# E[S] = n * mu
# SE[S] = sqrt(n) * sigema
# z = -E[S]/SE[S] = - sqrt(n) * mu / sigema
z <- qnorm(0.01)
n <- ceiling( (z^2*(x-l)^2*p*(1-p))/(l*p + x*(1-p))^2 )
n
n * (loss_per_foreclosure * p + x * (1-p))
p <- 0.04
x / 180000
# 4.1.2 the big short
p <- 0.04
r <- 0.05
x <- r * 180000
loss_per_foreclosure * p + x * (1-p)  # these three lines seems not right
# E[S] = n * mu
# SE[S] = sqrt(n) * sigema
# z = -E[S]/SE[S] = - sqrt(n) * mu / sigema
z <- qnorm(0.01)
n <- ceiling( (z^2*(x-l)^2*p*(1-p))/(l*p + x*(1-p))^2 )
n
n * (loss_per_foreclosure * p + x * (1-p))
profit <- replicate(B, {
draws <- sample(c(x, loss_per_foreclosure), n, prob=c(1-p, p), replace = TRUE)
sum(draws)
})
mean(profit < 0)
profit <- replicate(B, {
new_p <- 0.04 + sample(seq(-0.01, 0.01, length = 100), 1)
draws <- sample( c(x, loss_per_foreclosure), n, prob = c(1-new_p, new_p), replace = TRUE)
sum(draws)
})
mean(profit)
mean(profit < 0)
mean(profit < 10000000)
profit <- replicate(B, {
new_p <- 0.04 + sample(seq(-0.01, 0.01, length = 100), 1)
draws <- sample( c(x, loss_per_foreclosure), n, prob = c(1-new_p, new_p), replace = TRUE)
sum(draws)
})
mean(profit)
mean(profit < 0)
mean(profit < 10000000)
mean(profit < -10000000)
data.frame(losses_in_millions = profit/10^6) %>% ggplot(aes(losses_in_millions)) + geom_histogram(binwidth = 0.6, col="black")
